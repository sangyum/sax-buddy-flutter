// Mocks generated by Mockito 5.4.6 from annotations
// in sax_buddy/test/features/assessment/bloc/assessment_complete_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i11;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sax_buddy/features/assessment/domain/assessment_analyzer.dart'
    as _i4;
import 'package:sax_buddy/features/assessment/models/assessment_dataset.dart'
    as _i2;
import 'package:sax_buddy/features/assessment/models/assessment_result.dart'
    as _i7;
import 'package:sax_buddy/features/assessment/models/assessment_session.dart'
    as _i6;
import 'package:sax_buddy/features/assessment/providers/assessment_provider.dart'
    as _i12;
import 'package:sax_buddy/features/practice/models/practice_routine.dart'
    as _i10;
import 'package:sax_buddy/features/practice/services/practice_generation_service.dart'
    as _i13;
import 'package:sax_buddy/features/routines/providers/routines_provider.dart'
    as _i9;
import 'package:sax_buddy/services/audio_recording_service.dart' as _i3;
import 'package:sax_buddy/services/logger_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAssessmentDataset_0 extends _i1.SmartFake
    implements _i2.AssessmentDataset {
  _FakeAssessmentDataset_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAudioRecordingService_1 extends _i1.SmartFake
    implements _i3.AudioRecordingService {
  _FakeAudioRecordingService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AssessmentAnalyzer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssessmentAnalyzer extends _i1.Mock
    implements _i4.AssessmentAnalyzer {
  @override
  _i5.Future<_i2.AssessmentDataset> createAssessmentDataset(
    _i6.AssessmentSession? session,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createAssessmentDataset, [session]),
            returnValue: _i5.Future<_i2.AssessmentDataset>.value(
              _FakeAssessmentDataset_0(
                this,
                Invocation.method(#createAssessmentDataset, [session]),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i2.AssessmentDataset>.value(
              _FakeAssessmentDataset_0(
                this,
                Invocation.method(#createAssessmentDataset, [session]),
              ),
            ),
          )
          as _i5.Future<_i2.AssessmentDataset>);

  @override
  _i7.SkillLevel inferSkillLevel(_i6.AssessmentSession? session) =>
      (super.noSuchMethod(
            Invocation.method(#inferSkillLevel, [session]),
            returnValue: _i7.SkillLevel.beginner,
            returnValueForMissingStub: _i7.SkillLevel.beginner,
          )
          as _i7.SkillLevel);

  @override
  List<String> identifyStrengths(_i6.AssessmentSession? session) =>
      (super.noSuchMethod(
            Invocation.method(#identifyStrengths, [session]),
            returnValue: <String>[],
            returnValueForMissingStub: <String>[],
          )
          as List<String>);

  @override
  List<String> identifyWeaknesses(_i6.AssessmentSession? session) =>
      (super.noSuchMethod(
            Invocation.method(#identifyWeaknesses, [session]),
            returnValue: <String>[],
            returnValueForMissingStub: <String>[],
          )
          as List<String>);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i8.LoggerService {
  @override
  _i8.LogLevel get currentLevel =>
      (super.noSuchMethod(
            Invocation.getter(#currentLevel),
            returnValue: _i8.LogLevel.trace,
            returnValueForMissingStub: _i8.LogLevel.trace,
          )
          as _i8.LogLevel);

  @override
  void trace(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #trace,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void debug(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #debug,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void info(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #info,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void warning(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #warning,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void error(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #error,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logAuthEvent(
    String? event, {
    String? userId,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logAuthEvent, [event], {#userId: userId, #extra: extra}),
    returnValueForMissingStub: null,
  );

  @override
  void logUserAction(
    String? action,
    String? userId, {
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logUserAction, [action, userId], {#extra: extra}),
    returnValueForMissingStub: null,
  );

  @override
  void logApiCall(
    String? endpoint,
    String? method, {
    int? statusCode,
    Duration? duration,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(
      #logApiCall,
      [endpoint, method],
      {#statusCode: statusCode, #duration: duration, #extra: extra},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logError(
    String? operation,
    Object? error, {
    StackTrace? stackTrace,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(
      #logError,
      [operation, error],
      {#stackTrace: stackTrace, #extra: extra},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logPerformance(
    String? operation,
    Duration? duration, {
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logPerformance, [operation, duration], {#extra: extra}),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [RoutinesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutinesProvider extends _i1.Mock implements _i9.RoutinesProvider {
  @override
  List<_i10.PracticeRoutine> get recentRoutines =>
      (super.noSuchMethod(
            Invocation.getter(#recentRoutines),
            returnValue: <_i10.PracticeRoutine>[],
            returnValueForMissingStub: <_i10.PracticeRoutine>[],
          )
          as List<_i10.PracticeRoutine>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasRoutines =>
      (super.noSuchMethod(
            Invocation.getter(#hasRoutines),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get routineCount =>
      (super.noSuchMethod(
            Invocation.getter(#routineCount),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addRoutine(_i10.PracticeRoutine? routine) => super.noSuchMethod(
    Invocation.method(#addRoutine, [routine]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> addRoutines(List<_i10.PracticeRoutine>? routines) =>
      (super.noSuchMethod(
            Invocation.method(#addRoutines, [routines]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i10.PracticeRoutine? getRoutineAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#getRoutineAt, [index]),
            returnValueForMissingStub: null,
          )
          as _i10.PracticeRoutine?);

  @override
  void clearRoutines() => super.noSuchMethod(
    Invocation.method(#clearRoutines, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> refreshRoutines() =>
      (super.noSuchMethod(
            Invocation.method(#refreshRoutines, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void setLoading(bool? loading) => super.noSuchMethod(
    Invocation.method(#setLoading, [loading]),
    returnValueForMissingStub: null,
  );

  @override
  void setError(String? error) => super.noSuchMethod(
    Invocation.method(#setError, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void removeRoutineAt(int? index) => super.noSuchMethod(
    Invocation.method(#removeRoutineAt, [index]),
    returnValueForMissingStub: null,
  );

  @override
  void setUserId(String? userId) => super.noSuchMethod(
    Invocation.method(#setUserId, [userId]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> loadUserRoutines() =>
      (super.noSuchMethod(
            Invocation.method(#loadUserRoutines, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> saveRoutine(_i10.PracticeRoutine? routine) =>
      (super.noSuchMethod(
            Invocation.method(#saveRoutine, [routine]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteRoutine(String? routineId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoutine, [routineId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> syncRoutines() =>
      (super.noSuchMethod(
            Invocation.method(#syncRoutines, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  Map<String, dynamic> getStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AssessmentProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssessmentProvider extends _i1.Mock
    implements _i12.AssessmentProvider {
  @override
  _i12.ExerciseState get exerciseState =>
      (super.noSuchMethod(
            Invocation.getter(#exerciseState),
            returnValue: _i12.ExerciseState.setup,
            returnValueForMissingStub: _i12.ExerciseState.setup,
          )
          as _i12.ExerciseState);

  @override
  int get countdownValue =>
      (super.noSuchMethod(
            Invocation.getter(#countdownValue),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool get isCountdownActive =>
      (super.noSuchMethod(
            Invocation.getter(#isCountdownActive),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isRecording =>
      (super.noSuchMethod(
            Invocation.getter(#isRecording),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  int get currentExerciseNumber =>
      (super.noSuchMethod(
            Invocation.getter(#currentExerciseNumber),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get totalExercises =>
      (super.noSuchMethod(
            Invocation.getter(#totalExercises),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  double get progress =>
      (super.noSuchMethod(
            Invocation.getter(#progress),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  bool get canGoToNextExercise =>
      (super.noSuchMethod(
            Invocation.getter(#canGoToNextExercise),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get canGoToPreviousExercise =>
      (super.noSuchMethod(
            Invocation.getter(#canGoToPreviousExercise),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.AudioRecordingService get audioService =>
      (super.noSuchMethod(
            Invocation.getter(#audioService),
            returnValue: _FakeAudioRecordingService_1(
              this,
              Invocation.getter(#audioService),
            ),
            returnValueForMissingStub: _FakeAudioRecordingService_1(
              this,
              Invocation.getter(#audioService),
            ),
          )
          as _i3.AudioRecordingService);

  @override
  bool get hasError =>
      (super.noSuchMethod(
            Invocation.getter(#hasError),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.Future<void> startAssessment() =>
      (super.noSuchMethod(
            Invocation.method(#startAssessment, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void startCountdown() => super.noSuchMethod(
    Invocation.method(#startCountdown, []),
    returnValueForMissingStub: null,
  );

  @override
  void cancelCountdown() => super.noSuchMethod(
    Invocation.method(#cancelCountdown, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void goToNextExercise() => super.noSuchMethod(
    Invocation.method(#goToNextExercise, []),
    returnValueForMissingStub: null,
  );

  @override
  void goToPreviousExercise() => super.noSuchMethod(
    Invocation.method(#goToPreviousExercise, []),
    returnValueForMissingStub: null,
  );

  @override
  void completeAssessment() => super.noSuchMethod(
    Invocation.method(#completeAssessment, []),
    returnValueForMissingStub: null,
  );

  @override
  void cancelAssessment() => super.noSuchMethod(
    Invocation.method(#cancelAssessment, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetAssessment() => super.noSuchMethod(
    Invocation.method(#resetAssessment, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> retryAfterError() =>
      (super.noSuchMethod(
            Invocation.method(#retryAfterError, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PracticeGenerationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPracticeGenerationService extends _i1.Mock
    implements _i13.PracticeGenerationService {
  @override
  bool get isInitialized =>
      (super.noSuchMethod(
            Invocation.getter(#isInitialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void initialize(String? openAIApiKey) => super.noSuchMethod(
    Invocation.method(#initialize, [openAIApiKey]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<List<_i10.PracticeRoutine>> generatePracticePlans(
    _i2.AssessmentDataset? dataset, {
    dynamic Function(_i10.PracticeRoutine)? onRoutineCompleted,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generatePracticePlans,
              [dataset],
              {#onRoutineCompleted: onRoutineCompleted},
            ),
            returnValue: _i5.Future<List<_i10.PracticeRoutine>>.value(
              <_i10.PracticeRoutine>[],
            ),
            returnValueForMissingStub:
                _i5.Future<List<_i10.PracticeRoutine>>.value(
                  <_i10.PracticeRoutine>[],
                ),
          )
          as _i5.Future<List<_i10.PracticeRoutine>>);

  @override
  bool validateDataset(_i2.AssessmentDataset? dataset) =>
      (super.noSuchMethod(
            Invocation.method(#validateDataset, [dataset]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Map<String, dynamic> getStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
