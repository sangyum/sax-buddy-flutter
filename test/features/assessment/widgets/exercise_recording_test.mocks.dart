// Mocks generated by Mockito 5.4.6 from annotations
// in sax_buddy/test/features/assessment/widgets/exercise_recording_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sax_buddy/services/audio_recording_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioRecordingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecordingService extends _i1.Mock
    implements _i2.AudioRecordingService {
  MockAudioRecordingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i2.AudioRecordingState> get stateStream =>
      (super.noSuchMethod(
            Invocation.getter(#stateStream),
            returnValue: _i3.Stream<_i2.AudioRecordingState>.empty(),
          )
          as _i3.Stream<_i2.AudioRecordingState>);

  @override
  _i3.Stream<Duration> get durationStream =>
      (super.noSuchMethod(
            Invocation.getter(#durationStream),
            returnValue: _i3.Stream<Duration>.empty(),
          )
          as _i3.Stream<Duration>);

  @override
  _i3.Stream<List<double>> get waveformStream =>
      (super.noSuchMethod(
            Invocation.getter(#waveformStream),
            returnValue: _i3.Stream<List<double>>.empty(),
          )
          as _i3.Stream<List<double>>);

  @override
  _i2.AudioRecordingState get currentState =>
      (super.noSuchMethod(
            Invocation.getter(#currentState),
            returnValue: _i2.AudioRecordingState.idle,
          )
          as _i2.AudioRecordingState);

  @override
  bool get isRecording =>
      (super.noSuchMethod(Invocation.getter(#isRecording), returnValue: false)
          as bool);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> checkPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#checkPermissions, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<String?> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<String?> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<void> pauseRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecording, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> resumeRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecording, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> deleteRecording(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRecording, [path]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int?> getRecordingSize(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#getRecordingSize, [path]),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);
}
