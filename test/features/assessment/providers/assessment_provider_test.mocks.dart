// Mocks generated by Mockito 5.4.6 from annotations
// in sax_buddy/test/features/assessment/providers/assessment_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_storage/firebase_storage.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sax_buddy/services/audio_analysis_service.dart' as _i2;
import 'package:sax_buddy/services/audio_recording_service.dart' as _i4;
import 'package:sax_buddy/services/firebase_storage_service.dart' as _i7;
import 'package:sax_buddy/services/logger_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioAnalysisResult_0 extends _i1.SmartFake
    implements _i2.AudioAnalysisResult {
  _FakeAudioAnalysisResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUploadTask_1 extends _i1.SmartFake implements _i3.UploadTask {
  _FakeUploadTask_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AudioRecordingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecordingService extends _i1.Mock
    implements _i4.AudioRecordingService {
  MockAudioRecordingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i4.AudioRecordingState> get stateStream =>
      (super.noSuchMethod(
            Invocation.getter(#stateStream),
            returnValue: _i5.Stream<_i4.AudioRecordingState>.empty(),
          )
          as _i5.Stream<_i4.AudioRecordingState>);

  @override
  _i5.Stream<Duration> get durationStream =>
      (super.noSuchMethod(
            Invocation.getter(#durationStream),
            returnValue: _i5.Stream<Duration>.empty(),
          )
          as _i5.Stream<Duration>);

  @override
  _i5.Stream<List<double>> get waveformStream =>
      (super.noSuchMethod(
            Invocation.getter(#waveformStream),
            returnValue: _i5.Stream<List<double>>.empty(),
          )
          as _i5.Stream<List<double>>);

  @override
  _i4.AudioRecordingState get currentState =>
      (super.noSuchMethod(
            Invocation.getter(#currentState),
            returnValue: _i4.AudioRecordingState.idle,
          )
          as _i4.AudioRecordingState);

  @override
  bool get isRecording =>
      (super.noSuchMethod(Invocation.getter(#isRecording), returnValue: false)
          as bool);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> checkPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#checkPermissions, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<String?> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> pauseRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> resumeRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> deleteRecording(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRecording, [path]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int?> getRecordingSize(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#getRecordingSize, [path]),
            returnValue: _i5.Future<int?>.value(),
          )
          as _i5.Future<int?>);
}

/// A class which mocks [AudioAnalysisService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioAnalysisService extends _i1.Mock
    implements _i2.AudioAnalysisService {
  MockAudioAnalysisService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.AudioAnalysisResult> analyzeRecording(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#analyzeRecording, [filePath]),
            returnValue: _i5.Future<_i2.AudioAnalysisResult>.value(
              _FakeAudioAnalysisResult_0(
                this,
                Invocation.method(#analyzeRecording, [filePath]),
              ),
            ),
          )
          as _i5.Future<_i2.AudioAnalysisResult>);

  @override
  _i5.Future<Map<String, dynamic>> analyzeRealTimeData(
    List<double>? audioData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#analyzeRealTimeData, [audioData]),
            returnValue: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i5.Future<Map<String, dynamic>>);

  @override
  String frequencyToNote(double? frequency) =>
      (super.noSuchMethod(
            Invocation.method(#frequencyToNote, [frequency]),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#frequencyToNote, [frequency]),
            ),
          )
          as String);
}

/// A class which mocks [FirebaseStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorageService extends _i1.Mock
    implements _i7.FirebaseStorageService {
  MockFirebaseStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String?> uploadAudioFile(
    String? localFilePath,
    String? exerciseId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#uploadAudioFile, [localFilePath, exerciseId]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> uploadAudioFileInBackground(
    String? localFilePath,
    String? exerciseId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#uploadAudioFileInBackground, [
              localFilePath,
              exerciseId,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> deleteAudioFile(String? downloadUrl) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAudioFile, [downloadUrl]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, dynamic>?> getAudioFileMetadata(String? downloadUrl) =>
      (super.noSuchMethod(
            Invocation.method(#getAudioFileMetadata, [downloadUrl]),
            returnValue: _i5.Future<Map<String, dynamic>?>.value(),
          )
          as _i5.Future<Map<String, dynamic>?>);

  @override
  _i5.Future<List<_i3.Reference>> listUserAudioFiles() =>
      (super.noSuchMethod(
            Invocation.method(#listUserAudioFiles, []),
            returnValue: _i5.Future<List<_i3.Reference>>.value(
              <_i3.Reference>[],
            ),
          )
          as _i5.Future<List<_i3.Reference>>);

  @override
  _i5.Future<String> getDownloadUrl(_i3.Reference? ref) =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadUrl, [ref]),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getDownloadUrl, [ref]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<bool> fileExists(String? downloadUrl) =>
      (super.noSuchMethod(
            Invocation.method(#fileExists, [downloadUrl]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int?> getFileSize(String? downloadUrl) =>
      (super.noSuchMethod(
            Invocation.method(#getFileSize, [downloadUrl]),
            returnValue: _i5.Future<int?>.value(),
          )
          as _i5.Future<int?>);

  @override
  _i3.UploadTask createUploadTask(String? localFilePath, String? exerciseId) =>
      (super.noSuchMethod(
            Invocation.method(#createUploadTask, [localFilePath, exerciseId]),
            returnValue: _FakeUploadTask_1(
              this,
              Invocation.method(#createUploadTask, [localFilePath, exerciseId]),
            ),
          )
          as _i3.UploadTask);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i8.LoggerService {
  MockLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.LogLevel get currentLevel =>
      (super.noSuchMethod(
            Invocation.getter(#currentLevel),
            returnValue: _i8.LogLevel.trace,
          )
          as _i8.LogLevel);

  @override
  void trace(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #trace,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void debug(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #debug,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void info(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #info,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void warning(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #warning,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void error(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #error,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logAuthEvent(
    String? event, {
    String? userId,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logAuthEvent, [event], {#userId: userId, #extra: extra}),
    returnValueForMissingStub: null,
  );

  @override
  void logUserAction(
    String? action,
    String? userId, {
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logUserAction, [action, userId], {#extra: extra}),
    returnValueForMissingStub: null,
  );

  @override
  void logApiCall(
    String? endpoint,
    String? method, {
    int? statusCode,
    Duration? duration,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(
      #logApiCall,
      [endpoint, method],
      {#statusCode: statusCode, #duration: duration, #extra: extra},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logError(
    String? operation,
    Object? error, {
    StackTrace? stackTrace,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(
      #logError,
      [operation, error],
      {#stackTrace: stackTrace, #extra: extra},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logPerformance(
    String? operation,
    Duration? duration, {
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logPerformance, [operation, duration], {#extra: extra}),
    returnValueForMissingStub: null,
  );
}
