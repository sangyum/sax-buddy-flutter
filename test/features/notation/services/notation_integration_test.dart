import 'package:flutter_test/flutter_test.dart';
import 'package:sax_buddy/features/notation/services/notation_generation_service.dart';
import 'package:sax_buddy/features/practice/models/practice_routine.dart';
import 'package:sax_buddy/features/notation/domain/musical_note.dart';

void main() {
  group('Notation Integration Tests', () {
    late NotationGenerationService notationService;

    setUp(() {
      notationService = NotationGenerationService();
    });

    test('should enhance scale exercise with notation data', () {
      // Simulate a practice exercise generated by AI or manually
      const baseExercise = PracticeExercise(
        name: 'C Major Scale Practice',
        description: 'Practice C major scale ascending and descending',
        tempo: '120 BPM',
        keySignature: 'C Major',
        estimatedDuration: '10 minutes',
      );

      // Generate notation for the exercise
      final sheetMusicData = notationService.generateScaleNotation(
        key: 'C',
        scaleType: ScaleType.major,
        octave: 4,
        tempo: 120,
      );

      // Create enhanced exercise with notation
      final enhancedExercise = PracticeExercise(
        name: baseExercise.name,
        description: baseExercise.description,
        tempo: baseExercise.tempo,
        keySignature: baseExercise.keySignature,
        estimatedDuration: baseExercise.estimatedDuration,
        sheetMusicData: sheetMusicData,
      );

      expect(enhancedExercise.sheetMusicData, isNotNull);
      expect(enhancedExercise.sheetMusicData!.metadata.title, equals('C Major Scale'));
      expect(enhancedExercise.sheetMusicData!.measures.length, equals(2));
    });

    test('should enhance arpeggio exercise with notation data', () {
      const baseExercise = PracticeExercise(
        name: 'G Major Arpeggio',
        description: 'Practice G major arpeggio for chord progression work',
        tempo: '100 BPM',
        keySignature: 'G Major',
        estimatedDuration: '8 minutes',
      );

      final sheetMusicData = notationService.generateArpeggioNotation(
        key: 'G',
        chordType: ChordType.major,
        octave: 4,
        tempo: 100,
      );

      final enhancedExercise = PracticeExercise(
        name: baseExercise.name,
        description: baseExercise.description,
        tempo: baseExercise.tempo,
        keySignature: baseExercise.keySignature,
        estimatedDuration: baseExercise.estimatedDuration,
        sheetMusicData: sheetMusicData,
      );

      expect(enhancedExercise.sheetMusicData!.metadata.title, equals('G Major Arpeggio'));
      expect(enhancedExercise.sheetMusicData!.measures[0].notes.length, equals(4));
      
      // Check that it contains the correct chord tones
      final notes = enhancedExercise.sheetMusicData!.measures[0].notes;
      expect(notes[0].pitch, equals(NotePitch.g)); // Root
      expect(notes[1].pitch, equals(NotePitch.b)); // Major 3rd
      expect(notes[2].pitch, equals(NotePitch.d)); // Perfect 5th
      expect(notes[3].pitch, equals(NotePitch.g)); // Octave
    });

    test('should create complete practice routine with mixed exercise types', () {
      final scaleExercise = PracticeExercise(
        name: 'F Major Scale',
        description: 'Practice F major scale with proper fingering',
        tempo: '90 BPM',
        keySignature: 'F Major',
        estimatedDuration: '8 minutes',
        sheetMusicData: notationService.generateScaleNotation(
          key: 'F',
          scaleType: ScaleType.major,
          octave: 4,
          tempo: 90,
        ),
      );

      final arpeggioExercise = PracticeExercise(
        name: 'F Major Arpeggio',
        description: 'Practice F major arpeggio for smooth chord transitions',
        tempo: '80 BPM',
        keySignature: 'F Major',
        estimatedDuration: '6 minutes',
        sheetMusicData: notationService.generateArpeggioNotation(
          key: 'F',
          chordType: ChordType.major,
          octave: 4,
          tempo: 80,
        ),
      );

      final longToneExercise = PracticeExercise(
        name: 'Long Tone Practice',
        description: 'Sustained notes for breath control and tone development',
        tempo: '60 BPM',
        estimatedDuration: '6 minutes',
        sheetMusicData: notationService.generateLongToneNotation(
          notes: ['F4', 'Bb4', 'C5'],
          tempo: 60,
        ),
      );

      final routine = PracticeRoutine(
        id: 'test-routine',
        userId: 'test-user',
        title: 'F Major Focus Routine',
        description: 'Comprehensive practice routine focusing on F major key',
        targetAreas: ['Scales', 'Arpeggios', 'Tone'],
        difficulty: 'Intermediate',
        estimatedDuration: '20 minutes',
        exercises: [scaleExercise, arpeggioExercise, longToneExercise],
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        isAIGenerated: true,
      );

      expect(routine.exercises.length, equals(3));
      expect(routine.exercises.every((e) => e.sheetMusicData != null), isTrue);
      
      // Verify each exercise has appropriate notation
      expect(routine.exercises[0].sheetMusicData!.metadata.title, equals('F Major Scale'));
      expect(routine.exercises[1].sheetMusicData!.metadata.title, equals('F Major Arpeggio'));
      expect(routine.exercises[2].sheetMusicData!.metadata.title, equals('Long Tone Exercise'));
    });

    test('should handle exercise pattern recognition for automatic notation', () {
      // Test that we can infer notation type from exercise names/descriptions
      final exercisePatterns = [
        {
          'name': 'D Major Scale Warm-up',
          'expectedKey': 'D',
          'expectedType': ScaleType.major,
        },
        {
          'name': 'Bb Major Arpeggio Practice',
          'expectedKey': 'BB',
          'expectedType': ChordType.major,
        },
        {
          'name': 'Chromatic Scale Exercise',
          'expectedKey': 'C',
          'expectedType': ScaleType.chromatic,
        },
      ];

      for (final pattern in exercisePatterns) {
        final name = pattern['name'] as String;
        
        if (name.contains('Chromatic')) {
          final notation = notationService.generateScaleNotation(
            key: pattern['expectedKey'] as String,
            scaleType: pattern['expectedType'] as ScaleType,
            octave: 4,
            tempo: 120,
          );
          expect(notation.metadata.title, contains('Chromatic'));
        } else if (name.contains('Scale')) {
          final notation = notationService.generateScaleNotation(
            key: pattern['expectedKey'] as String,
            scaleType: pattern['expectedType'] as ScaleType,
            octave: 4,
            tempo: 120,
          );
          expect(notation.metadata.title, contains(pattern['expectedKey'] as String));
        } else if (name.contains('Arpeggio')) {
          final notation = notationService.generateArpeggioNotation(
            key: pattern['expectedKey'] as String,
            chordType: pattern['expectedType'] as ChordType,
            octave: 4,
            tempo: 120,
          );
          expect(notation.metadata.title, contains('Arpeggio'));
        }
      }
    });
  });
}