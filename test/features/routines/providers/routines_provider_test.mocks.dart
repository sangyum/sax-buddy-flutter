// Mocks generated by Mockito 5.4.6 from annotations
// in sax_buddy/test/features/routines/providers/routines_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sax_buddy/features/practice/models/practice_routine.dart'
    as _i5;
import 'package:sax_buddy/features/practice/repositories/practice_routine_repository.dart'
    as _i3;
import 'package:sax_buddy/services/logger_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i2.LoggerService {
  MockLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LogLevel get currentLevel =>
      (super.noSuchMethod(
            Invocation.getter(#currentLevel),
            returnValue: _i2.LogLevel.trace,
          )
          as _i2.LogLevel);

  @override
  void trace(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #trace,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void debug(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #debug,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void info(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #info,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void warning(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #warning,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void error(
    String? message, {
    Map<String, dynamic>? extra,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #error,
      [message],
      {#extra: extra, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logAuthEvent(
    String? event, {
    String? userId,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logAuthEvent, [event], {#userId: userId, #extra: extra}),
    returnValueForMissingStub: null,
  );

  @override
  void logUserAction(
    String? action,
    String? userId, {
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logUserAction, [action, userId], {#extra: extra}),
    returnValueForMissingStub: null,
  );

  @override
  void logApiCall(
    String? endpoint,
    String? method, {
    int? statusCode,
    Duration? duration,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(
      #logApiCall,
      [endpoint, method],
      {#statusCode: statusCode, #duration: duration, #extra: extra},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logError(
    String? operation,
    Object? error, {
    StackTrace? stackTrace,
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(
      #logError,
      [operation, error],
      {#stackTrace: stackTrace, #extra: extra},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logPerformance(
    String? operation,
    Duration? duration, {
    Map<String, dynamic>? extra,
  }) => super.noSuchMethod(
    Invocation.method(#logPerformance, [operation, duration], {#extra: extra}),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PracticeRoutineRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPracticeRoutineRepository extends _i1.Mock
    implements _i3.PracticeRoutineRepository {
  MockPracticeRoutineRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createRoutine(_i5.PracticeRoutine? routine) =>
      (super.noSuchMethod(
            Invocation.method(#createRoutine, [routine]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i5.PracticeRoutine?> getRoutine(
    String? userId,
    String? routineId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRoutine, [userId, routineId]),
            returnValue: _i4.Future<_i5.PracticeRoutine?>.value(),
          )
          as _i4.Future<_i5.PracticeRoutine?>);

  @override
  _i4.Future<List<_i5.PracticeRoutine>> getUserRoutines(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserRoutines, [userId]),
            returnValue: _i4.Future<List<_i5.PracticeRoutine>>.value(
              <_i5.PracticeRoutine>[],
            ),
          )
          as _i4.Future<List<_i5.PracticeRoutine>>);

  @override
  _i4.Future<void> updateRoutine(_i5.PracticeRoutine? routine) =>
      (super.noSuchMethod(
            Invocation.method(#updateRoutine, [routine]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRoutine(String? userId, String? routineId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoutine, [userId, routineId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.PracticeRoutine>> getCurrentRoutineSet(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentRoutineSet, [userId]),
            returnValue: _i4.Future<List<_i5.PracticeRoutine>>.value(
              <_i5.PracticeRoutine>[],
            ),
          )
          as _i4.Future<List<_i5.PracticeRoutine>>);

  @override
  _i4.Future<void> markRoutinesAsNotCurrent(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#markRoutinesAsNotCurrent, [userId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
