name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none .
      
    - name: Analyze project source
      run: flutter analyze
      
    - name: Run tests
      run: flutter test --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get

    - name: Create google-services.json
      env:
        # This pulls the Base64 string from your GitHub Secret
        GOOGLE_SERVICES_BASE64: ${{ secrets.GOOGLE_SERVICES_BASE64 }}
      run: |
        # Create the directory if it doesn't exist (though 'android/app/' usually does)
        mkdir -p android/app/
        # Decode the Base64 string and write it to the google-services.json file
        echo "$GOOGLE_SERVICES_BASE64" | base64 --decode > android/app/google-services.json

    - name: Build Android APK
      run: flutter build apk --release
      
    - name: Build Android App Bundle
      run: flutter build appbundle --release
        
    - name: Upload Android APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        
    - name: Upload Android App Bundle
      uses: actions/upload-artifact@v4
      with:
        name: android-aab
        path: build/app/outputs/bundle/release/app-release.aab

    - name: Upload Android APK to Firebase App Distribution
      if: github.ref == 'refs/heads/main'
      uses: nickwph/firebase-app-distribution-action@v1
      with:
        app: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
        credentials: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        groups: testers
        file: build/app/outputs/flutter-apk/app-release.apk
        release-notes: |
          ðŸš€ New Android build from commit ${{ github.sha }}
          
          Changes in this build:
          - ${{ github.event.head_commit.message }}
          
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'
        cache: true
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Get dependencies
      run: flutter pub get

    - name: Create GoogleService-Info.plist
      env:
        # This pulls the Base64 string from your GitHub Secret
        PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
      run: |
        # Create the Runner directory if it somehow doesn't exist (it almost always does)
        mkdir -p ios/Runner/
        # Decode the Base64 string and write it to the GoogleService-Info.plist file
        echo "$PLIST_BASE64" | base64 --decode > ios/Runner/GoogleService-Info.plist
      
    - name: Build iOS
      run: flutter build ios --release --no-codesign
    
    - name: Create iOS IPA
      run: |
        cd build/ios/iphoneos
        mkdir -p Payload
        cp -r Runner.app Payload/
        zip -r Runner.ipa Payload/
        
    - name: Upload iOS Build
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: build/ios/iphoneos/Runner.ipa

    - name: Upload iOS IPA to Firebase App Distribution
      if: github.ref == 'refs/heads/main'
      uses: nickwph/firebase-app-distribution-action@v1
      with:
        app: ${{ secrets.FIREBASE_IOS_APP_ID }}
        credentials: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        groups: testers
        file: build/ios/iphoneos/Runner.ipa
        release-notes: |
          ðŸš€ New iOS build from commit ${{ github.sha }}
          
          Changes in this build:
          - ${{ github.event.head_commit.message }}
          
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}